// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator db {
    provider          = "go run github.com/steebchen/prisma-client-go"
    output            = "."
    disableGoBinaries = true
    package           = "sqlstore"
}

datasource db {
    provider = "sqlite"
    url      = "file:notes.db"
}

model User {
    id           Int          @id @default(autoincrement())
    email        String       @unique
    username     String       @unique
    passwordHash String
    createdAt    DateTime     @default(now()) // 생성일
    updatedAt    DateTime     @updatedAt // 업데이트일
    deletedAt    DateTime? // 삭제일 
    UserProfile  UserProfile?
    UserSetting  UserSetting?
    UserAccount  UserAccount?
    UserSocial   UserSocial?

    @@map(name: "users")
}

model UserProfile {
    id        Int       @id @default(autoincrement())
    userId    Int       @unique
    bio       String?
    location  String?
    birthday  String?
    country   String?
    gender    String?
    createdAt DateTime  @default(now()) // 생성일
    updatedAt DateTime  @updatedAt // 업데이트일
    deletedAt DateTime? // 삭제일 
    User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "user_profiles")
}

model UserSetting {
    id        Int       @id @default(autoincrement())
    userId    Int       @unique
    createdAt DateTime  @default(now()) // 생성일
    updatedAt DateTime  @updatedAt // 업데이트일
    deletedAt DateTime? // 삭제일 
    User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "user_settings")
}

model UserAccount {
    id        Int       @id @default(autoincrement())
    userId    Int       @unique
    createdAt DateTime  @default(now()) // 생성일
    updatedAt DateTime  @updatedAt // 업데이트일
    deletedAt DateTime? // 삭제일 
    User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "user_accounts")
}

model UserSocial {
    id        Int       @id @default(autoincrement())
    userId    Int       @unique
    webSite   String?
    createdAt DateTime  @default(now()) // 생성일
    updatedAt DateTime  @updatedAt // 업데이트일
    deletedAt DateTime? // 삭제일 
    User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "user_socials")
}
